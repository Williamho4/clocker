// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum MemberRole {
  member
  admin
  owner
}

enum ShiftStatus {
  PENDING
  CHECKED_IN
  CHECKED_OUT
  MISSED
}

enum BreakStatus {
  PENDING
  DONE
}

enum ShiftRequestStatus {
  PENDING
  ACCEPTED
}

model User {
  id            String       @id
  name          String
  firstName     String
  lastName      String
  email         String
  emailVerified Boolean
  image         String?
  role          UserRole     @default(USER)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]
  Schedule    Schedule[]
  attendances Attendance[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           MemberRole
  createdAt      DateTime
  attendances    Attendance[]
  shifts         Shift[]

  requestedShifts ShiftRequest[] @relation("Requester")
  receivedShifts  ShiftRequest[] @relation("Receiver")

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Shift {
  id           String         @id @default(cuid())
  startTime    DateTime
  endTime      DateTime
  member       Member         @relation(fields: [memberId], references: [id])
  memberId     String
  schedule     Schedule       @relation(fields: [scheduleId], references: [id])
  scheduleId   String
  attendance   Attendance?
  shiftRequest ShiftRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id             String       @id @default(cuid())
  status         ShiftStatus  @default(PENDING)
  checkInTime    DateTime?
  checkOutTime   DateTime?
  breaks         Break[]
  member         Member       @relation(fields: [memberId], references: [id])
  memberId       String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  shift          Shift?       @relation(fields: [shiftId], references: [id])
  shiftId        String?      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attendance")
}

model Break {
  id           String      @id @default(cuid())
  startTime    DateTime
  endTime      DateTime?
  status       BreakStatus
  attendance   Attendance  @relation(fields: [attendanceId], references: [id])
  attendanceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("break")
}

model Schedule {
  id             String       @id @default(cuid())
  date           DateTime
  shifts         Shift[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, organizationId])
}

model ShiftRequest {
  id      String @id @default(cuid())
  shift   Shift  @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  shiftId String

  requester         Member @relation("Requester", fields: [requesterMemberId], references: [id])
  requesterMemberId String

  receiver         Member @relation("Receiver", fields: [receiverMemberId], references: [id])
  receiverMemberId String

  status        ShiftRequestStatus @default(PENDING)
  adminApproval ShiftRequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
